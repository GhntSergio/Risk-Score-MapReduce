#!/usr/bin/env python3
"""
Script de test local pour le pipeline MapReduce de d√©tection de churn
Permet de tester mapper et reducer sans Hadoop
"""

import os
import sys
import subprocess
import tempfile
from pathlib import Path

def run_local_test():
    """Ex√©cute un test local du pipeline MapReduce"""
    
    # Chemins des scripts
    script_dir = Path(__file__).parent
    project_dir = script_dir.parent
    mapper_path = project_dir / "mapper_reducer" / "mapper.py"
    reducer_path = project_dir / "mapper_reducer" / "reducer.py"
    data_dir = project_dir / "data"
    
    print("üß™ Test local du pipeline MapReduce de d√©tection de churn")
    print(f"üìÅ R√©pertoire du projet: {project_dir}")
    
    # V√©rifier que les fichiers existent
    if not mapper_path.exists():
        print(f"‚ùå Erreur: Mapper non trouv√© √† {mapper_path}")
        return False
        
    if not reducer_path.exists():
        print(f"‚ùå Erreur: Reducer non trouv√© √† {reducer_path}")
        return False
    
    # G√©n√©rer des donn√©es de test si n√©cessaire
    test_data_path = data_dir / "sample_input.txt"
    if not test_data_path.exists():
        print("üìä G√©n√©ration des donn√©es de test...")
        generate_script = data_dir / "generate_test_data.py"
        if generate_script.exists():
            subprocess.run([sys.executable, str(generate_script)], cwd=str(data_dir))
        else:
            print(f"‚ùå Script de g√©n√©ration non trouv√©: {generate_script}")
            return False
    
    if not test_data_path.exists():
        print(f"‚ùå Fichier de donn√©es de test non trouv√©: {test_data_path}")
        return False
    
    print(f"üìÑ Utilisation des donn√©es: {test_data_path}")
    
    # √âtape 1: Ex√©cuter le mapper
    print("üó∫Ô∏è  Ex√©cution du mapper...")
    with open(test_data_path, 'r') as input_file:
        mapper_process = subprocess.Popen(
            [sys.executable, str(mapper_path)],
            stdin=input_file,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        mapper_output, mapper_error = mapper_process.communicate()
    
    if mapper_process.returncode != 0:
        print(f"‚ùå Erreur dans le mapper: {mapper_error}")
        return False
    
    print(f"‚úÖ Mapper termin√© - {len(mapper_output.splitlines())} lignes g√©n√©r√©es")
    
    # √âtape 2: Trier les donn√©es (simulation du shuffle Hadoop)
    print("üîÑ Tri des donn√©es interm√©diaires...")
    sorted_data = '\n'.join(sorted(mapper_output.strip().split('\n')))
    
    # √âtape 3: Ex√©cuter le reducer
    print("üìä Ex√©cution du reducer...")
    reducer_process = subprocess.Popen(
        [sys.executable, str(reducer_path)],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    reducer_output, reducer_error = reducer_process.communicate(input=sorted_data)
    
    if reducer_process.returncode != 0:
        print(f"‚ùå Erreur dans le reducer: {reducer_error}")
        return False
    
    print(f"‚úÖ Reducer termin√©")
    
    # Analyser les r√©sultats
    results = reducer_output.strip().split('\n')
    results = [line for line in results if line.strip()]
    
    risk_count = sum(1 for line in results if 'RISK' in line)
    ok_count = sum(1 for line in results if 'OK' in line)
    
    print("\nüìà R√©sultats de l'analyse:")
    print(f"   üë• Total des clients analys√©s: {len(results)}")
    print(f"   ‚ö†Ô∏è  Clients √† risque (RISK): {risk_count}")
    print(f"   ‚úÖ Clients OK: {ok_count}")
    
    # Afficher quelques exemples
    print("\nüîç Exemples de r√©sultats:")
    for i, line in enumerate(results[:10]):
        print(f"   {line}")
    if len(results) > 10:
        print(f"   ... et {len(results) - 10} autres")
    
    # Sauvegarder les r√©sultats
    output_file = project_dir / "local_test_results.txt"
    with open(output_file, 'w') as f:
        f.write(reducer_output)
    
    print(f"\nüíæ R√©sultats sauvegard√©s dans: {output_file}")
    
    # Comparer avec les profils de r√©f√©rence si disponible
    reference_file = data_dir / "user_profiles_reference.txt"
    if reference_file.exists():
        print("\nüéØ Comparaison avec les profils de r√©f√©rence:")
        compare_with_reference(results, reference_file)
    
    return True

def compare_with_reference(results, reference_file):
    """Compare les r√©sultats avec les profils de r√©f√©rence"""
    
    # Charger les r√©sultats
    result_dict = {}
    for line in results:
        if '\t' in line:
            user_id, status = line.strip().split('\t')
            result_dict[user_id] = status
    
    # Charger la r√©f√©rence
    reference_dict = {}
    try:
        with open(reference_file, 'r') as f:
            next(f)  # Skip header
            for line in f:
                parts = line.strip().split(',')
                if len(parts) >= 3:
                    user_id, profile, expected = parts[0], parts[1], parts[2]
                    reference_dict[user_id] = expected
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de lire le fichier de r√©f√©rence: {e}")
        return
    
    # Comparer
    correct = 0
    total = 0
    for user_id, expected in reference_dict.items():
        if user_id in result_dict:
            actual = result_dict[user_id]
            if actual == expected:
                correct += 1
            total += 1
    
    if total > 0:
        accuracy = (correct / total) * 100
        print(f"   üéØ Pr√©cision: {correct}/{total} ({accuracy:.1f}%)")
    else:
        print("   ‚ö†Ô∏è  Aucune correspondance trouv√©e")

if __name__ == "__main__":
    success = run_local_test()
    sys.exit(0 if success else 1)